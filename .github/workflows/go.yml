name: Go

on:
  push:
    branches:
      - "master"
      - "feature/**"
      - "releases/**"
  workflow_dispatch:

jobs:
  govulncheck_job:
    runs-on: ubuntu-latest
    name: Run govulncheck
    steps:
      - id: govulncheck
        uses: golang/govulncheck-action@v1
        with:
           go-version-input: 1.20.6
           go-package: ./...
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'
      - name: Cache Go packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build
        run: go build -o testgo cmd/main.go

      # - name: Test
      #   run: go test -short -v ./...
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: testgo-artifact
          path: testgo

  verify:
    name: Integrationtest
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'
      - name: Cache Go packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Integrationtest
        run: go test -v test/. -itest=it

  security:
    name: Securityscan
    needs: build
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: "-no-fail -fmt sarif -out results.sarif ./..."
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif

  docker:
    strategy:
      fail-fast: false
      matrix:
        service:
          - routingservice
          - fleetservice
          - searchservice
          - messagingservice
    permissions:
      contents: write # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      packages: write
    name: Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: testgo-artifact
      #     path: testgo
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # docker metadata for cosign
      - id: docker_meta
        uses: docker/metadata-action@v4.6.0
        with:
          images: ghcr.io/andidroid/testgo/${{ matrix.service }}
          tags: |
            type=sha,prefix=,suffix=
            type=sha,format=long,prefix=,suffix=
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: ./${{ matrix.service }}/Dockerfile
          context: .
          push: true
          pull: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: "ghcr.io/andidroid/testgo/${{ matrix.service }}:${{github.sha}}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          output: "trivy-results.sarif"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        continue-on-error: true
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
      - name: Sign image with a key
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY ${TAGS}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
# TODO use Github Action for yq
#      - name: Set foobar to cool
#        uses: mikefarah/yq@master
#        with:
#          cmd: yq -i '.foo.bar = "cool"' 'config.yml'
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.28.1/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
          yq --version
      # - name: Install yq
      #   uses: mikefarah/yq@master
      #   with:
      #     cmd: yq -i '.foo.bar = "cool"' 'config.yml'
      - name: Install semver-tool
        run: |
          wget https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.4.0/src/semver -O /usr/local/bin/semver && chmod +x /usr/local/bin/semver
          semver --version

      - name: Checkout private tools
        uses: actions/checkout@v4
        with:
          repository: andidroid/gorouting-gitops
          token: ${{ secrets.ANDIDROID_PACKAGES }} # `GH_PAT` is a secret that contains your PAT
          path: gorouting-gitops
          ref: ${{ github.ref }} #feature/routing

      - name: Update image tag in Helm git repo
        run: |
          cd gorouting-gitops
          cd charts/${{ matrix.service }}
          ls
          echo Update Helm chart values.yaml with new image:tag ${{ matrix.service }}:${{github.sha}}
          set -x
          yq -i '.image.tag = "${{github.sha}}"' ./values.yaml
          git config --global user.name $GIT_USER_NAME
          git config --global user.email $GIT_USER_MAIL
          git add .  
          git commit -m "set ${{ matrix.service }} image tag to ${{github.sha}}" 
          git push
        # TODO: push in feature branch and create merge request
        # VERSION=$( yq '.version' Chart.yaml)
        # VERSION=$( semver bump prerelease ${{github.sha}} $VERSION)
        # yq -i '.version = strenv(VERSION)' Chart.yaml
        # yq -i '.appVersion = "${{github.sha}}"' Chart.yaml
        # cat Chart.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.ANDIDROID_PACKAGES }}
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_MAIL: ${{ secrets.GIT_USER_MAIL }}

  lint:
    name: Linter
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Super-Linter
        uses: github/super-linter@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
